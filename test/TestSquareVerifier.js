// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

// Test verification with incorrect proof

var Verifier = artifacts.require("Verifier");
const validProof = require('../proofs/1_proof.json');
const invalidProof = {
  "proof": {
    "a": [
      "0x288f27fdb1b0e46015b469888396e4d6979cdee81a1cd1c2ac7bafbbe54f746b",
      "0x0dcc0bf9461d0223766a0ec9e25c75715f35abc700480b4ae590bb8d2bdf2fdd"
    ],
    "b": [
      [
        "0x188a6d4d1a7ae078473d6c217a129dc99669b4b56330dfa9370d50fb61c3dee1",
        "0x1fbc3780266785f4c770f98dd24f4472add7c7226f28b0f35430b53ce8f895f5"
      ],
      [
        "0x25f66e325a75a04c9aad2f476c6a71added85b85c557f504d1dc726c959793ae",
        "0x19ed27034b027d2a46ad9f54a3f56503ff73fe2ce9c8ede358c0db63bdfa04ef"
      ]
    ],
    "c": [
      "0x1f5f3cc446b37e0feb630638e7d506ce4030d2b42a37092d9155f9f1ed51e569",
      "0x2206bd9e97a1f69ce6b84be49c9c76be7ae4e7e166b7df29e305ac5a0d8b0f22"
    ]
  },
  "inputs": [
    "0x0000000000000000000000000000000000000000000000000000000000000004",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
  ]
};

contract("TestSquareVerifier", (accounts) => {

	const account_one = accounts[0];


	describe("test square verifier", function () {
		before(async function () {
			this.contract = await Verifier.new({ from: account_one });
		});

		it("should succeed with valid proof", async function () {
			let success = await this.contract.verifyTx(validProof.proof,validProof.inputs);
			assert.equal(success,true,"Valid proof could not be sucessfully verified");
		});

		it("should fail with invalid proof", async function () {
			let success = await this.contract.verifyTx(invalidProof.proof,invalidProof.inputs);
			assert.equal(success,false,"Invalid proof could be sucessfully verified");
		});

	});
});

